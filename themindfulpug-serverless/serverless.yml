# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: themindfulpug-serverless
# app and org for use with dashboard.serverless.com
# app: balance
# org: joshgreenwell

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  timeout: 15

# iamRoleStatements:
#   - Effect: "Allow"
#     Action:
#       - dynamodb:*
#     Resource: "*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  individually: true
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

plugins:
  - serverless-dynamodb-local
  - serverless-bundle # Package our functions with Webpack
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-offline

functions:
  # Auth Routes
  auth:
    handler: handler.auth
    cors: true
  # Payments
  createPayment:
    handler: handler.createPaymentHandler
    events:
      - http:
          path: /payment/create
          method: post
          authorizer: auth
          cors: true
  subscribe:
    handler: handler.subscribeHandler
    events:
      - http:
          path: /payment/subscribe/{providerId}
          method: get
          authorizer: auth
          cors: true
  unsubscribe:
    handler: handler.unsubscribeHandler
    events:
      - http:
          path: /payment/unsubscribe/{providerId}
          method: get
          authorizer: auth
          cors: true
  updateSubscription:
    handler: handler.updateSubscriptionHandler
    events:
      - http:
          path: /payment/update/{providerId}/{subId}
          method: get
          authorizer: auth
          cors: true
  cancelSubscription:
    handler: handler.cancelSubscriptionHandler
    events:
      - http:
          path: /payment/cancel/{subId}
          method: get
          authorizer: auth
          cors: true
  paymentWebhook:
    handler: handler.paymentWebhookHandler
    events:
      - http:
          path: /payment/webhook
          method: post
          cors: true
  # Analytics
  analyticsS3toDynamoDB:
    handler: handler.analyticsS3toDynamoDBHandler
    events:
      - http:
          path: /analytics/run
          method: get
          authorizer: auth
          cors: true
  getClientsUsage:
    handler: handler.getClientsUsageHandler
    events:
      - http:
          path: /analytics/clients/usage/{providerId}
          method: get
          authorizer: auth
          cors: true
  # Surveys
  getSurveyTemplates:
    handler: handler.getSurveyTemplatesHandler
    events:
      - http:
          path: /surveys/templates/{providerId}
          method: get
          authorizer: auth
          cors: true
  createSurveyTemplate:
    handler: handler.createSurveyTemplateHandler
    events:
      - http:
          path: /surveys/templates/create
          method: post
          authorizer: auth
          cors: true
  updateSurveyTemplate:
    handler: handler.updateSurveyTemplateHandler
    events:
      - http:
          path: /surveys/templates/update
          method: post
          authorizer: auth
          cors: true
  deleteSurveyTemplate:
    handler: handler.deleteSurveyTemplateHandler
    events:
      - http:
          path: /surveys/templates/delete/{templateId}
          method: delete
          authorizer: auth
          cors: true
  # Groups
  getGroups:
    handler: handler.getGroupsHandler
    events:
      - http:
          path: /groups/{providerId}
          method: get
          authorizer: auth
          cors: true
  createGroup:
    handler: handler.createGroupHandler
    events:
      - http:
          path: /groups/create
          method: post
          authorizer: auth
          cors: true
  updateGroup:
    handler: handler.updateGroupHandler
    events:
      - http:
          path: /groups/update
          method: post
          authorizer: auth
          cors: true
  removeGroup:
    handler: handler.removeGroupHandler
    events:
      - http:
          path: /groups/remove/{groupId}
          method: get
          authorizer: auth
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    # This response is needed for custom authorizer ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
